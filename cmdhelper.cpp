#include "cmdhelper.h"

#include <QAbstractItemView>
#include <QEvent>
#include <QKeyEvent>
#include <QDebug>

struct dlCmd_t {
  const QString inputCmd;
  const QString outputCmd;
  bool(*parser)(QString*);
};

bool parse_firmwareVersion(QString * response) {
  (void)response;
  return true;
}

const struct dlCmd_t dlCmdList[] = {
  // DLA register commands
  { .inputCmd = "get firmwareVersion", .outputCmd = "G0000", .parser = parse_firmwareVersion },
  { .inputCmd = "get productCode", .outputCmd = "G0001" },
  { .inputCmd = "set productCode", .outputCmd = "S0001" },
  { .inputCmd = "get serialNumber", .outputCmd = "G0002" },
  { .inputCmd = "set serialNumber", .outputCmd = "S0002" },
  { .inputCmd = "get unixTime", .outputCmd = "G0003" },
  { .inputCmd = "set unixTime", .outputCmd = "S0003" },
  { .inputCmd = "get temperature", .outputCmd = "G0004" },
  { .inputCmd = "get lightManualLevel", .outputCmd = "G0005" },
  { .inputCmd = "set lightManualLevel", .outputCmd = "S0005" },
  { .inputCmd = "get lightActiveLevel", .outputCmd = "G0006" },
  { .inputCmd = "get lightInactiveLevel", .outputCmd = "G0007" },
  { .inputCmd = "get lightOverrideActiveLevel", .outputCmd = "G0008" },
  { .inputCmd = "set lightOverrideActiveLevel", .outputCmd = "S0008" },
  { .inputCmd = "get lightOverrideInactiveLevel", .outputCmd = "G0009" },
  { .inputCmd = "set lightOverrideInactiveLevel", .outputCmd = "S0009" },
  { .inputCmd = "get sensorDelayTime", .outputCmd = "G000A" },
  { .inputCmd = "get sensorOverrideDelayTime", .outputCmd = "G000B" },
  { .inputCmd = "set sensorOverrideDelayTime", .outputCmd = "S000B" },
  { .inputCmd = "get powerupTime", .outputCmd = "G000C" },
  { .inputCmd = "get usageActiveTime", .outputCmd = "G000D" },
  { .inputCmd = "get usageInactiveTime", .outputCmd = "G000E" },
  { .inputCmd = "get usagePermActiveTime", .outputCmd = "G000F" },
  { .inputCmd = "get usagePermInactiveTime", .outputCmd = "G0010" },
  { .inputCmd = "get usageWh", .outputCmd = "G0011" },
  { .inputCmd = "get usagePerm", .outputCmd = "G0012" },
  { .inputCmd = "get usageSenorEvents", .outputCmd = "G0013" },
  { .inputCmd = "get usagePermSensorEvents", .outputCmd = "G0014" },
  { .inputCmd = "get numberOfLogEntries", .outputCmd = "G0015" },
  { .inputCmd = "get configCalibrationP0", .outputCmd = "G0016" },
  { .inputCmd = "set configCalibrationP0", .outputCmd = "S0016" },
  { .inputCmd = "get configCalibrationP1", .outputCmd = "G0017" },
  { .inputCmd = "set configCalibrationP1", .outputCmd = "S0017" },
  { .inputCmd = "get configCalibrationP2", .outputCmd = "G0018" },
  { .inputCmd = "set configCalibrationP2", .outputCmd = "S0018" },
  { .inputCmd = "get configCalibrationP3", .outputCmd = "G0019" },
  { .inputCmd = "set configCalibrationP3", .outputCmd = "S0019" },
  { .inputCmd = "get buildTime", .outputCmd = "G001A" },
  { .inputCmd = "set buildTime", .outputCmd = "S001A" },
  { .inputCmd = "get sensorTimeoutCountdown", .outputCmd = "G001B" },
  { .inputCmd = "get currentLightLevel", .outputCmd = "G001C" },
  { .inputCmd = "get safeMode", .outputCmd = "G001D" },
  { .inputCmd = "get lightBarSelect", .outputCmd = "G001E" },
  { .inputCmd = "set lightBarSelect", .outputCmd = "S001E" },
  { .inputCmd = "get currentPowerConsumption", .outputCmd = "G001F" },
  { .inputCmd = "get wirelessDataAggregator", .outputCmd = "G0020" },
  { .inputCmd = "set wirelessDataAggregator", .outputCmd = "S0020" },
  { .inputCmd = "get resetUsageTimestamp", .outputCmd = "G0021" },
  { .inputCmd = "get pwmPeriodRegister", .outputCmd = "G0022" },
  { .inputCmd = "set pwmPeriodRegister", .outputCmd = "S0022" },
  { .inputCmd = "get analogSensorValue", .outputCmd = "G0023" },
  { .inputCmd = "get analogReportingHysteresis", .outputCmd = "G0024" },
  { .inputCmd = "get zone", .outputCmd = "G0025" },
  { .inputCmd = "set zone", .outputCmd = "S0025" },
  { .inputCmd = "get lightTemporaryActiveLevel", .outputCmd = "G0026" },
  { .inputCmd = "set lightTemporaryActiveLevel", .outputCmd = "S0026" },
  { .inputCmd = "get lightTemporaryInactiveLevel", .outputCmd = "G0027" },
  { .inputCmd = "set lightTemporaryInactiveLevel", .outputCmd = "S0027" },
  { .inputCmd = "get sensorTemporaryDelayTime", .outputCmd = "G0028" },
  { .inputCmd = "set sensorTemporaryDelayTime", .outputCmd = "S0028" },
  { .inputCmd = "get temporaryOverrideTimeout", .outputCmd = "G0029" },
  { .inputCmd = "set temporaryOverrideTimeout", .outputCmd = "S0029" },
  { .inputCmd = "get setRemoteState", .outputCmd = "G002A" },
  { .inputCmd = "set setRemoteState", .outputCmd = "S002A" },
  { .inputCmd = "get remoteSetDelayTime", .outputCmd = "G002B" },
  { .inputCmd = "set remoteSetDelayTime", .outputCmd = "S002B" },
  { .inputCmd = "get remoteSecondsCountdown", .outputCmd = "G002C" },
  { .inputCmd = "get minimumDimmingValue", .outputCmd = "G002D" },
  { .inputCmd = "get powerCalibrationA0", .outputCmd = "G002E" },
  { .inputCmd = "set powerCalibrationA0", .outputCmd = "S002E" },
  { .inputCmd = "get powerCalibrationB0", .outputCmd = "G002F" },
  { .inputCmd = "set powerCalibrationB0", .outputCmd = "S002F" },
  { .inputCmd = "get powerCalibrationC0", .outputCmd = "G0030" },
  { .inputCmd = "set powerCalibrationC0", .outputCmd = "S0030" },
  { .inputCmd = "get powerCalibrationMA", .outputCmd = "G0031" },
  { .inputCmd = "set powerCalibrationMA", .outputCmd = "S0031" },
  { .inputCmd = "get powerCalibrationMB", .outputCmd = "G0032" },
  { .inputCmd = "set powerCalibrationMB", .outputCmd = "S0032" },
  { .inputCmd = "get powerCalibrationMC", .outputCmd = "G0033" },
  { .inputCmd = "set powerCalibrationMC", .outputCmd = "S0033" },
  { .inputCmd = "get powerCalibrationPOff", .outputCmd = "G0034" },
  { .inputCmd = "set powerCalibrationPOff", .outputCmd = "S0034" },
  { .inputCmd = "get powerCalibrationPOn", .outputCmd = "G0035" },
  { .inputCmd = "set powerCalibrationPOn", .outputCmd = "S0035" },
  { .inputCmd = "get powerCalibrationT0", .outputCmd = "G0036" },
  { .inputCmd = "set powerCalibrationT0", .outputCmd = "S0036" },
  { .inputCmd = "get powerEstimatorTemperatureOverride", .outputCmd = "G0037" },
  { .inputCmd = "set powerEstimatorTemperatureOverride", .outputCmd = "S0037" },
  { .inputCmd = "get cachedTemperatureValue", .outputCmd = "G0038" },
  { .inputCmd = "get eepromSize", .outputCmd = "G0039" },
  { .inputCmd = "get hardwareRevision", .outputCmd = "G003A" },
  { .inputCmd = "get wirelessPanId", .outputCmd = "G003B" },
  { .inputCmd = "set wirelessPanId", .outputCmd = "S003B" },
  { .inputCmd = "get wirelessChannelMask", .outputCmd = "G003C" },
  { .inputCmd = "set wirelessChannelMask", .outputCmd = "S003C" },
  { .inputCmd = "get wirelessShortAddress", .outputCmd = "G003D" },
  { .inputCmd = "set wirelessShortAddress", .outputCmd = "S003D" },
  { .inputCmd = "get wirelessRole", .outputCmd = "G003E" },
  { .inputCmd = "set wirelessRole", .outputCmd = "S003E" },
  { .inputCmd = "get wirelessWatchdogHold", .outputCmd = "G003F" },
  { .inputCmd = "set wirelessWatchdogHold", .outputCmd = "S003F" },
  { .inputCmd = "get wirelessWatchdogPeriod", .outputCmd = "G0040" },
  { .inputCmd = "set wirelessWatchdogPeriod", .outputCmd = "S0040" },
  { .inputCmd = "get firmwareCode", .outputCmd = "G0041" },
  { .inputCmd = "get moduleFirmwareCode", .outputCmd = "G0042" },
  { .inputCmd = "get maxTemperatureObserved", .outputCmd = "G0043" },
  { .inputCmd = "get maxTemperatureObservedTime", .outputCmd = "G0044" },
  { .inputCmd = "get overTemperatureThresholdLow", .outputCmd = "G0045" },
  { .inputCmd = "set overTemperatureThresholdLow", .outputCmd = "S0045" },
  { .inputCmd = "get overTemperatureThresholdHigh", .outputCmd = "G0046" },
  { .inputCmd = "set overTemperatureThresholdHigh", .outputCmd = "S0046" },
  { .inputCmd = "get overTemperatureDimmingLimit", .outputCmd = "G0047" },
  { .inputCmd = "set overTemperatureDimmingLimit", .outputCmd = "S0047" },
  { .inputCmd = "get analogDimmingMode", .outputCmd = "G0048" },
  { .inputCmd = "set analogDimmingMode", .outputCmd = "S0048" },
  { .inputCmd = "get fixtureIdMode", .outputCmd = "G0049" },
  { .inputCmd = "set fixtureIdMode", .outputCmd = "S0049" },
  { .inputCmd = "get acFrequency", .outputCmd = "G004A" },
  { .inputCmd = "get sensorBits", .outputCmd = "G004B" },
  { .inputCmd = "get powerMeterCommand", .outputCmd = "G004C" },
  { .inputCmd = "set powerMeterCommand", .outputCmd = "S004C" },
  { .inputCmd = "get powerMeterRegister", .outputCmd = "G004D" },
  { .inputCmd = "set powerMeterRegister", .outputCmd = "S004D" },
  { .inputCmd = "get ambientTemperature", .outputCmd = "G004E" },
  { .inputCmd = "get lightSensorLevel", .outputCmd = "G004F" },
  { .inputCmd = "get sensor0Timeout", .outputCmd = "G0050" },
  { .inputCmd = "set sensor0Timeout", .outputCmd = "S0050" },
  { .inputCmd = "get sensor0Offset", .outputCmd = "G0051" },
  { .inputCmd = "set sensor0Offset", .outputCmd = "S0051" },
  { .inputCmd = "get sensor1Timeout", .outputCmd = "G0052" },
  { .inputCmd = "set sensor1Timeout", .outputCmd = "S0052" },
  { .inputCmd = "get sensor1Offset", .outputCmd = "G0053" },
  { .inputCmd = "set sensor1Offset", .outputCmd = "S0053" },
  { .inputCmd = "get analogDimmingLowValue", .outputCmd = "G0054" },
  { .inputCmd = "set analogDimmingLowValue", .outputCmd = "S0054" },
  { .inputCmd = "get analogDimmingHighValue", .outputCmd = "G0055" },
  { .inputCmd = "set analogDimmingHighValue", .outputCmd = "S0055" },
  { .inputCmd = "get analogDimmingOffValue", .outputCmd = "G0056" },
  { .inputCmd = "set analogDimmingOffValue", .outputCmd = "S0056" },
  { .inputCmd = "get powerMeasurementMode", .outputCmd = "G0057" },
  { .inputCmd = "set powerMeasurementMode", .outputCmd = "S0057" },
  { .inputCmd = "get externalPowerMeter", .outputCmd = "G0058" },
  { .inputCmd = "set externalPowerMeter", .outputCmd = "S0058" },
  { .inputCmd = "get ambientSensorValue", .outputCmd = "G0059" },
  { .inputCmd = "get ambientActiveLevel", .outputCmd = "G005A" },
  { .inputCmd = "set ambientActiveLevel", .outputCmd = "S005A" },
  { .inputCmd = "get ambientInactiveLevel", .outputCmd = "G005B" },
  { .inputCmd = "set ambientInactiveLevel", .outputCmd = "S005B" },
  { .inputCmd = "get ambientEnvironmentalGain", .outputCmd = "G005C" },
  { .inputCmd = "set ambientEnvironmentalGain", .outputCmd = "S005C" },
  { .inputCmd = "get ambientOffHysteresis", .outputCmd = "G005D" },
  { .inputCmd = "set ambientOffHysteresis", .outputCmd = "S005D" },
  { .inputCmd = "get ambientOnHysteresis", .outputCmd = "G005E" },
  { .inputCmd = "set ambientOnHysteresis", .outputCmd = "S005E" },
  { .inputCmd = "get powerboardProtocol", .outputCmd = "G005F" },
  { .inputCmd = "get ledOverride", .outputCmd = "G0060" },
  { .inputCmd = "set ledOverride", .outputCmd = "S0060" },
  { .inputCmd = "get fadeUpStep", .outputCmd = "G0061" },
  { .inputCmd = "set fadeUpStep", .outputCmd = "S0061" },
  { .inputCmd = "get fadeDownStep", .outputCmd = "G0062" },
  { .inputCmd = "set fadeDownStep", .outputCmd = "S0062" },
  { .inputCmd = "get maxBrightness", .outputCmd = "G0063" },
  { .inputCmd = "set maxBrightness", .outputCmd = "S0063" },
  { .inputCmd = "get i2cResets", .outputCmd = "G0064" },
  { .inputCmd = "get sensorGuardTime", .outputCmd = "G0065" },
  { .inputCmd = "set sensorGuardTime", .outputCmd = "S0065" },
  { .inputCmd = "get inputVoltage", .outputCmd = "G0066" },
  { .inputCmd = "get inputVoltageCalibration", .outputCmd = "G0067" },
  { .inputCmd = "set inputVoltageCalibration", .outputCmd = "S0067" },
  { .inputCmd = "get numberOfLightbars", .outputCmd = "G0068" },
  { .inputCmd = "set numberOfLightbars", .outputCmd = "S0068" },
  { .inputCmd = "get ambientDivisor", .outputCmd = "G0069" },
  { .inputCmd = "get currentLimit", .outputCmd = "G006A" },
  { .inputCmd = "set currentLimit", .outputCmd = "S006A" },
  { .inputCmd = "get bootloaderCode", .outputCmd = "G006B" },
  { .inputCmd = "get xpressMode", .outputCmd = "G006C" },
  { .inputCmd = "set xpressMode", .outputCmd = "S006C" },
  { .inputCmd = "get batteryBackupStatus", .outputCmd = "G006D" },
  { .inputCmd = "set batteryBackupStatus", .outputCmd = "S006D" },
  { .inputCmd = "get sensorSeconds", .outputCmd = "G006E" },
  { .inputCmd = "get inputVoltageTwo", .outputCmd = "G006F" },
  { .inputCmd = "get inputVoltageTwoCalibration", .outputCmd = "G0070" },
  { .inputCmd = "set inputVoltageTwoCalibration", .outputCmd = "S0070" },
  { .inputCmd = "get maxRampUpSpeed", .outputCmd = "G0071" },
  { .inputCmd = "set maxRampUpSpeed", .outputCmd = "S0071" },
  { .inputCmd = "get maxRampDownSpeed", .outputCmd = "G0072" },
  { .inputCmd = "set maxRampDownSpeed", .outputCmd = "S0072" },
  { .inputCmd = "get wirelessNetworkKey", .outputCmd = "G0073" },
  { .inputCmd = "set wirelessNetworkKey", .outputCmd = "S0073" },
  { .inputCmd = "get emergencyLightLevel", .outputCmd = "G0074" },
  { .inputCmd = "get batteryBackupPowerCalibration", .outputCmd = "G0075" },
  { .inputCmd = "set batteryBackupPowerCalibration", .outputCmd = "S0075" },
  { .inputCmd = "get motionSensorProfile", .outputCmd = "G0076" },
  { .inputCmd = "set motionSensorProfile", .outputCmd = "S0076" },
  { .inputCmd = "get powerMeterLevelAtOff", .outputCmd = "G0077" },
  { .inputCmd = "set powerMeterLevelAtOff", .outputCmd = "S0077" },
  { .inputCmd = "get powerMeterLevelAtMin", .outputCmd = "G0078" },
  { .inputCmd = "set powerMeterLevelAtMin", .outputCmd = "S0078" },
  { .inputCmd = "get powerMeterLevelAtMax", .outputCmd = "G0079" },
  { .inputCmd = "set powerMeterLevelAtMax", .outputCmd = "S0079" },
  { .inputCmd = "get powerMeterType", .outputCmd = "G007A" },
  { .inputCmd = "set powerMeterType", .outputCmd = "S007A" },
  { .inputCmd = "get DLAiSlaveMode", .outputCmd = "G007B" },
  { .inputCmd = "set DLAiSlaveMode", .outputCmd = "S007B" },
  { .inputCmd = "get DALIBootloadingActive", .outputCmd = "G007C" },
  { .inputCmd = "get testingMode", .outputCmd = "G007D" },
  { .inputCmd = "set testingMode", .outputCmd = "S007D" },
  { .inputCmd = "get numberOfBatteriesSupported", .outputCmd = "G007E" },
  { .inputCmd = "set numberOfBatteriesSupported", .outputCmd = "S007E" },
  // reset commands
  { .inputCmd = "reset usage", .outputCmd = "!U" },
  { .inputCmd = "reset log", .outputCmd = "!L" },
  { .inputCmd = "reset newLog", .outputCmd = "!K" },
  { .inputCmd = "reset eeprom", .outputCmd = "!Z" },
  { .inputCmd = "reset eepromToDefault", .outputCmd = "!C" },
  { .inputCmd = "reset eepromToLatestMapVersion", .outputCmd = "!E" },
  { .inputCmd = "reset network", .outputCmd = "!N" },
  { .inputCmd = "reset networkWithoutChecking", .outputCmd = "!N1" },
  { .inputCmd = "reset daliCommissioning", .outputCmd = "!Y" },
  { .inputCmd = "reset daliPowerMetering", .outputCmd = "!A" },
  // reboot commands
  { .inputCmd = "reboot", .outputCmd = "!R" },
  { .inputCmd = "reboot wirelessCard", .outputCmd = "!W" },
  { .inputCmd = "reboot i2cDevices", .outputCmd = "!X" },
  // reload commands
  { .inputCmd = "reload dlaFirmware", .outputCmd = "!B" },
  { .inputCmd = "reload wirelessModuleFirmware", .outputCmd = "!M" },
  { .inputCmd = "reload powerboardFirmware", .outputCmd = "!P" },
  { .inputCmd = "reload lightbarFirmware", .outputCmd = "!P" },
  { .inputCmd = "reload batteryBackupFirmware", .outputCmd = "!P" },
  { .inputCmd = "reload motionSensorFirmware", .outputCmd = "!V" },
};

cmdHelper::cmdHelper(QObject *parent) : QObject(parent) {
  QStringList keywordList;
  // build the command dictionary
  for (quint32 i = 0; i < sizeof(dlCmdList) / sizeof(dlCmdList[0]); i++) {
    keywordList << dlCmdList[i].inputCmd;
  }
  cmdCompleter = new QCompleter(keywordList, this);
  cmdCompleter->setCaseSensitivity(Qt::CaseInsensitive);
  cmdCompleter->popup()->installEventFilter(this);
}

bool cmdHelper::eventFilter(QObject *target, QEvent *event) {
  // just close the completer list when enter/return is pressed
  if (event->type() == QEvent::KeyPress) {
    QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);
    if ((keyEvent->key() == Qt::Key_Return) || (keyEvent->key() == Qt::Key_Enter)) {
      cmdCompleter->popup()->close();
      return true;
    }
  }
  return QObject::eventFilter(target, event);
}
